#!/usr/bin/env ruby

require 'aws-sdk-ec2' # v3
require 'aws-sdk-servicequotas'
require 'yaml'

AMI_DEV_PREFIX = "runs-on-dev"
AMI_PROD_PREFIX = "runs-on-v2.2"
SOURCE_REGION = "us-east-1"
REGIONS = YAML.load_file(File.expand_path("../config.yml", __dir__)).fetch("regions")

def enable_public_amis_for_region(region)
  ec2 = Aws::EC2::Client.new(region: region)
  ec2.disable_image_block_public_access
  puts "Image block public access disabled for region #{region}"
end

def request_quota_increase_for_region(region)
  client = Aws::ServiceQuotas::Client.new(region: region)
  
  quota_value = 30
  quota_code = 'L-0E3CBAB9'
  params = {
    service_code: 'ec2',
    quota_code: quota_code,
  }
  
  begin
    # Check if quota needs increase
    current_quota = client.get_service_quota({
      service_code: 'ec2',
      quota_code: quota_code
    })

    if current_quota.quota.value < quota_value
      response = client.request_service_quota_increase(params.merge(desired_value: quota_value))
      puts "Quota increase requested successfully: #{response.requested_quota}"
    else
      puts "Current quota is sufficient: #{current_quota.quota.value}"
    end
  rescue Aws::ServiceQuotas::Errors::ServiceError => e
    puts "Error requesting quota increase: #{e.message}"
  end
end

def copy_ami_to_regions(ami_id, regions)
  ec2 = Aws::EC2::Client.new(region: SOURCE_REGION)
  ami_description = ec2.describe_images({
    image_ids: [ami_id]
  }).images.first

  if ami_description.nil?
    fail "no AMI found"
  end

  name = ami_description.name.sub(AMI_DEV_PREFIX, AMI_PROD_PREFIX)
  puts "Going to copy AMI #{ami_id} (#{ami_description.name}) to #{regions.join(', ')} with name: #{name}"

  if name.start_with?("runs-on-v")
    puts "Warning: you are copying the AMI as an official image (#{name})."
    print "Make sure you know what you are doing (y/n) "
    reply = gets.chomp

    if reply.downcase != 'y'
      puts "Exiting"
      exit 1
    end
  end

  sleep 5

  results = regions.map do |region|
    puts "Copying AMI #{ami_id} to #{region}..."
    ec2 = Aws::EC2::Client.new(region: region)
    response = ec2.copy_image({
      source_region: SOURCE_REGION,
      source_image_id: ami_id,
      copy_image_tags: true,
      name: name,
      description: "RunsOn copy of #{ami_id} to #{region}",
    })
    {client: ec2, region: region, image_id: response.image_id}
  end

  results.each do |res|
    ec2, image_id, region = res.values_at(:client, :image_id, :region)
    puts "Waiting for AMI #{image_id} to be available in #{region}..."
    ec2.wait_until(:image_available, image_ids: [image_id])
    puts "AMI #{image_id} is now available in region #{region}"

    ec2.modify_image_attribute({
      image_id: image_id,
      launch_permission: {
        add: [{ group: 'all' }]
      }
    })
    puts "Launch permissions for AMI #{image_id} updated to public"
  end
end

if ARGV.length < 1
  puts "Usage: #{$PROGRAM_NAME} <ami_id>"
  exit 1
end

ami_id = ARGV.shift

REGIONS.each do |region|
  enable_public_amis_for_region(region)
  request_quota_increase_for_region(region)
end if ENV['CI']

copy_ami_to_regions(ami_id, REGIONS)
