#!/usr/bin/env ruby

require 'aws-sdk-ec2' # v3

def copy_ami_to_regions(ami_id, regions, name)
  results = regions.map do |region|
    puts "Copying AMI #{ami_id} to #{region}..."
    ec2 = Aws::EC2::Client.new(region: region)
    response = ec2.copy_image({
      source_region: "us-east-1",
      source_image_id: ami_id,
      copy_image_tags: true,
      name: name,
      description: "Copy of #{ami_id} to #{region}",
    })
    {client: ec2, region: region, image_id: response.image_id}
  end

  results.each do |res|
    ec2, image_id, region = res.values_at(:client, :image_id, :region)
    puts "Waiting for AMI #{image_id} to be available in #{region}..."
    ec2.wait_until(:image_available, image_ids: [image_id])
    puts "AMI #{image_id} is now available in region #{region}"

    ec2.modify_image_attribute({
      image_id: image_id,
      launch_permission: {
        add: [{ group: 'all' }]
      }
    })
    puts "Launch permissions for AMI #{image_id} updated to public"
  end
end

if ARGV.length < 1
  puts "Usage: #{$PROGRAM_NAME} <ami_id> [name] [region1,region2,...]"
  exit 1
end

ami_id = ARGV.shift
name = ARGV.shift
regions = ARGV[0] ? ARGV.shift.split(',') : ["us-east-1", "us-west-2", "eu-west-1", "eu-central-1", "eu-west-2", "ap-northeast-1", "ap-southeast-2"]

if name.nil?
  ec2 = Aws::EC2::Client.new(region: "us-east-1")
  ami_description = ec2.describe_images({
    image_ids: [ami_id]
  }).images.first

  if ami_description.nil?
    puts "AMI #{ami_id} not found."
    exit 1
  end

  architecture = ami_description.architecture.sub("x86_64", "x64")
  puts "AMI #{ami_id} architecture is #{architecture}."

  name = "runs-on-v2.2-ubuntu22-full-#{architecture}-#{Time.now.strftime('%Y%m%d%H%M')}"
end

if name.start_with?("runs-on-v")
  puts "Warning: you are copying the AMI as an official image (#{name})."
  print "Make sure you know what you are doing (y/n) "
  reply = gets.chomp

  if reply.downcase != 'y'
    puts "Exiting"
    exit 1
  else
    sleep 5
  end
end

copy_ami_to_regions(ami_id, regions, name)
