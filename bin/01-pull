#!/usr/bin/env ruby

require 'json'
require 'open-uri'
require 'slop'
require 'fileutils'

options = {}

usage = Slop::Options.new do |opts|
  opts.banner = "Usage: #{$0} [--force] --arch x64|arm64"

  opts.string '-d', '--dist', 'Distribution', default: "ubuntu22"
  opts.string '-a', '--arch', 'Architecture', required: true
  opts.bool '-f', '--force', 'Force'
end

begin
  options = usage.parse(ARGV).to_hash
rescue Slop::Error => e
  puts "Error: #{e.message}"
  puts
  puts usage
  exit 1
end

arch = options[:arch]
dist = options[:dist]
RELEASE_DIR = "releases/#{dist}/#{arch}"

if options[:force]
  FileUtils.rm_rf(RELEASE_DIR)
end

if Dir.exist?(RELEASE_DIR)
  puts "Skipping #{RELEASE_DIR}, already exists"
  exit 0
end

FileUtils.mkdir_p(File.dirname(RELEASE_DIR))
system("git clone --depth 1 --branch main https://github.com/actions/runner-images.git \"#{RELEASE_DIR}\"")
['.git', '.github', 'docs', '.vscode', 'images.CI', '.gitignore', '.gitattributes', 'CODE_OF_CONDUCT.md', 'CONTRIBUTING.md', 'SECURITY.md'].each do |useless_dir|
  FileUtils.rm_rf("#{RELEASE_DIR}/#{useless_dir}")
end
['images/macos', 'images/windows', 'images/ubuntu'].each do |useless_dir|
  FileUtils.rm_rf("#{RELEASE_DIR}/#{useless_dir}") unless useless_dir =~ %r{#{dist.gsub(/[0-9]+/, '')}}
end

system("./bin/patch/#{dist}-#{arch} #{RELEASE_DIR}") || fail("Failed to patch #{RELEASE_DIR}")

if ENV['GITHUB_OUTPUT']
  File.open(ENV['GITHUB_OUTPUT'], 'a') { |f| f.write("release=#{RELEASE_DIR}\n") }
end

puts "Next (CI):"
puts "AMI_PREFIX=runs-on-v2.2 ./bin/02-build #{RELEASE_DIR}"
puts
puts "Next (DEV):"
puts "AMI_PREFIX=runs-on-dev env $(cat .env) ./bin/02-build #{RELEASE_DIR}"


