#!/usr/bin/env ruby

require 'aws-sdk-ec2' # v3
require 'slop'

options = {}
usage = Slop::Options.new do |opts|
  opts.banner = "Usage: #{$0} AMI_NAME_OR_ID [--instance-type TYPE]"
  opts.string '--instance-type', 'Instance type'
  opts.integer '--volume-size', 'Volume size'
  opts.integer '--shutdown', 'Shutdown instance after specified minutes (0 to disable, default: 15)', default: 15
  opts.bool '-h', '--help', 'Show help'
end

begin
  options = usage.parse(ARGV).to_hash
  ami_name_or_id = ARGV.shift # Get the first argument as AMI name or ID
  options[:ami_name_or_id] = ami_name_or_id # Assign it to options
rescue Slop::Error => e
  puts "Error: #{e.message}"
  puts
  puts usage
  exit 1
end

if options[:help]
  puts usage
  exit 0
end

LINUX_USER_DATA_SCRIPT = <<EOF
EOF

WINDOWS_USER_DATA_SCRIPT = <<EOF
<powershell>
</powershell>
EOF

# use systemd timer instead of sleeping so that cloud-init finishes
def auto_shutdown_linux(minutes)
  <<EOF
cat > /etc/systemd/system/auto-shutdown.service <<'EOT'
[Unit]
Description=Auto shutdown after #{minutes} minutes

[Service]
Type=oneshot
ExecStart=/sbin/shutdown -h now
EOT

cat > /etc/systemd/system/auto-shutdown.timer <<'EOT'
[Unit]
Description=Schedule auto shutdown

[Timer]
OnActiveSec=#{minutes}m
Unit=auto-shutdown.service

[Install]
WantedBy=timers.target
EOT

systemctl enable auto-shutdown.timer
systemctl start auto-shutdown.timer
EOF
end

def auto_shutdown_windows(minutes)
  <<EOF
<powershell>
Start-Sleep -Seconds #{minutes * 60}
Stop-Computer -Force
</powershell>
EOF
end

def find_latest_ami(options)
  ec2 = Aws::EC2::Client.new
  ami_name_or_id = options[:ami_name_or_id]
  filters = [
    { name: "state", values: ["available"] }
  ]
  if ami_name_or_id.start_with?("ami-")
    filters << { name: "image-id", values: [ami_name_or_id] }
  else
    filters << { name: "name", values: ["#{ami_name_or_id}*"] }
  end
  images = ec2.describe_images(filters: filters).images

  fail "No AMIs found matching prefix: #{ami_name_or_id}" if images.empty?
  
  latest = images.sort_by { |img| img.creation_date }.last
  puts "Found AMI: #{latest.name} (#{latest.image_id})"
  [latest.image_id, latest.architecture, latest.platform, latest.block_device_mappings]
end

def launch_ami(options)
  ami_id, architecture, platform, block_device_mappings = find_latest_ami(options)
  is_windows = platform == "windows"

  user_data_script = is_windows ? WINDOWS_USER_DATA_SCRIPT : LINUX_USER_DATA_SCRIPT
  
  shutdown_minutes = options[:shutdown]
  if shutdown_minutes > 0
    if is_windows
      user_data_script += auto_shutdown_windows(shutdown_minutes)
    else
      user_data_script += auto_shutdown_linux(shutdown_minutes)
    end
  end
  
  instance_type = if options[:instance_type]
                    options[:instance_type]
                  elsif architecture == "arm64"
                    "m7g.large"
                  elsif architecture == "x86_64"
                    "m7a.large"
                  end

  puts "Launching #{is_windows ? 'Windows' : 'Linux'} instance with AMI ID: #{ami_id.inspect} and instance type: #{instance_type.inspect}"
  ec2 = Aws::EC2::Client.new

  # Find subnet with test=true tag
  subnet = ec2.describe_subnets(
    filters: [{ name: 'tag:test', values: ['true'] }]
  ).subnets.first
  fail "No subnet found with tag test=true" unless subnet
  subnet_id = subnet.subnet_id

  # Find security group with test=true tag
  security_group = ec2.describe_security_groups(
    filters: [{ name: 'tag:test', values: ['true'] }]
  ).security_groups.first
  fail "No security group found with tag test=true" unless security_group
  security_group_id = security_group.group_id

  # Get volume size from AMI block device mappings
  root_device = block_device_mappings.find { |bdm| bdm.device_name == "/dev/sda1" }
  volume_size = root_device&.ebs&.volume_size || (is_windows ? 120 : 50)
  if options[:volume_size]
    volume_size = options[:volume_size]
  end

  puts "Volume size: #{volume_size}"

  instance_params = {
    image_id: ami_id,
    instance_type: instance_type,
    min_count: 1,
    max_count: 1,
    subnet_id: subnet_id,
    security_group_ids: [security_group_id],
    instance_initiated_shutdown_behavior: "terminate",
    iam_instance_profile: {
      name: "SSMInstanceProfile"
    },
    user_data: Base64.encode64(user_data_script),
    block_device_mappings: [
      {
        device_name: "/dev/sda1",
        ebs: {
          volume_type: "gp3",
          volume_size: volume_size,
          delete_on_termination: true
        }
      }
    ],
    tag_specifications: [{
      resource_type: "instance",
      tags: [
        { key: "application", value: "RunsOn" }
      ]
    }]
  }

  instance = ec2.run_instances(instance_params).instances.first
  puts "Launched instance with ID: #{instance.instance_id}"

  # Wait for the instance to be running
  ec2.wait_until(:instance_running, instance_ids: [instance.instance_id])
  instance = ec2.describe_instances(instance_ids: [instance.instance_id]).reservations.first.instances.first

  puts "Instance Public IP: #{instance.public_ip_address}"
  
  username = is_windows ? "Administrator" : "root"
  cmd = if is_windows
    %{aws ssm start-session --target #{instance.instance_id} --document-name AWS-StartInteractiveCommand --parameters command="powershell"}
  else
    %{aws ssm start-session --target #{instance.instance_id} --document-name AWS-StartInteractiveCommand --parameters command="bash"}
  end
  puts cmd
  
  # Give the instance a bit more time to initialize SSH, especially for Windows
  wait_time = is_windows ? 60 : 12
  puts "Waiting #{wait_time} seconds for SSM to be ready..."
  sleep wait_time
  
  exec(cmd)
end

# Launch instance
launch_ami(options)
