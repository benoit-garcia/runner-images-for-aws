#!/usr/bin/env ruby
require 'aws-sdk-ec2'
require 'terminal-table'

AWS_PROFILE = ENV.fetch('AWS_PROFILE')
AMI_PREFIX = ENV.fetch('AMI_PREFIX', 'runs-on-dev')


def cleanup_region(region)
  ec2 = Aws::EC2::Client.new(region: region)

  ["x64", "arm64"].each do |arch|
    puts "## #{region} #{AMI_PREFIX} #{arch}"

    # Get all AMIs with the specified name pattern
    resp = ec2.describe_images({
      filters: [
        {
          name: "name",
          values: ["#{AMI_PREFIX}-ubuntu22-full-#{arch}-*"],
        },
      ],
    })
    amis = resp.images.sort_by(&:creation_date).reverse

    table = Terminal::Table.new do |t|
      t.headings = ['AMI ID', 'Created at', 'Name']
      amis.each do |ami|
        t << [ami.image_id, ami.creation_date, ami.name]
      end
    end

    puts table
    most_recent_ami = nil
    amis.each do |ami|
      # Skip the most recent AMI
      if most_recent_ami.nil?
        most_recent_ami = ami
        next
      end

      puts ""

      # Ask for confirmation before each removal
      print "Are you sure you want to deregister AMI #{ami.image_id} and delete its associated snapshot? (y/n) "
      reply = gets.chomp

      if reply.downcase == 'y'
        sleep 2
        # Deregister the AMI
        ec2.deregister_image({image_id: ami.image_id})

        # Get the snapshot associated with the AMI
        snapshot_id = ami.block_device_mappings[0].ebs.snapshot_id

        # Delete the snapshot
        ec2.delete_snapshot({snapshot_id: snapshot_id})
      else
        puts "Skipping AMI #{ami.image_id}"
      end
    end

    puts ""
  end
end

["us-east-1", "us-west-2", "eu-west-1", "eu-central-1"].each do |region|
  cleanup_region(region)
end
