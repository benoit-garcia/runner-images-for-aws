#!/bin/bash

set -eo pipefail

RELEASE_DIR="$1"

if [ -z "$RELEASE_DIR" ]; then
  echo "Usage: $0 <RELEASE_DIR>"
  exit 1
fi

release_dir="$RELEASE_DIR"
build_dir="$release_dir/images/ubuntu/scripts/build"
toolsets_dir="$release_dir/images/ubuntu/toolsets"
TOOLSET_PATH="$toolsets_dir/toolset-2204.json"

# custom stuff
mkdir -p $release_dir/images/ubuntu/custom
cp patches/ubuntu/runner-user.sh "$release_dir/images/ubuntu/custom/runner-user.sh"
cp patches/ubuntu/waagent.conf "$release_dir/images/ubuntu/custom/waagent.conf"

# Save ~3.2GB by removing default docker images
yq -oj -i '.docker.images = []' $TOOLSET_PATH
yq -oj -i 'del(.toolcache[] | select(.name == "CodeQL"))' $TOOLSET_PATH

# only keep 4 last python version
yq -oj -i 'eval(.toolcache[] | select(.name == "Python") | .versions |= [.[-4],.[-3],.[-2],.[-1]])' $TOOLSET_PATH

# only keep one last pypy version
yq -oj -i 'eval(.toolcache[] | select(.name == "PyPy") | .versions |= [.[-1]])' $TOOLSET_PATH
# only keep one last go version
yq -oj -i 'eval(.toolcache[] | select(.name == "go") | .versions |= [.[-1]])' $TOOLSET_PATH
yq -oj -i 'eval(.toolcache[] | select(.name == "go") | .default |= (parent | .versions[-1]))' $TOOLSET_PATH
# only keep one last clang version
yq -oj -i 'eval(.clang | .versions |= [.[-1]])' $TOOLSET_PATH
yq -oj -i 'eval(.clang | .default_version |= (parent | .versions[-1]))' $TOOLSET_PATH
# only keep one last gcc version
yq -oj -i 'eval(.gcc | .versions |= [.[-1]])' $TOOLSET_PATH
# remove sphinxsearch
yq -oj -i 'del(.apt.cmd_packages[] | select(. == "sphinxsearch"))' $TOOLSET_PATH

# only keep yarn
yq -oj -i 'del(.node_modules[] | (select(.name != "yarn" and .name != "typescript")))' $TOOLSET_PATH

yq -oj -i 'del(.azureModules[])' $TOOLSET_PATH

# finally, copy over the packer template
cp patches/ubuntu/templates/ubuntu-22.04-x64-aws.pkr.hcl "$release_dir/images/ubuntu/templates/"